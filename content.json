{"meta":{"title":"Mno's blog","subtitle":"人之所以能，是相信能","description":null,"author":"Mno","url":"http://immno.github.io"},"pages":[],"posts":[{"title":"vultr自动配置SS和BBR脚本","slug":"vultr自动配置SS和BBR脚本","date":"2018-11-23T11:21:45.000Z","updated":"2019-04-25T09:23:34.000Z","comments":true,"path":"2018/11/23/vultr自动配置SS和BBR脚本/","link":"","permalink":"http://immno.github.io/2018/11/23/vultr自动配置SS和BBR脚本/","excerpt":"","text":"Vultr使用很方便，使用时创建，不想用的时候随时destroy不会扣钱，频繁操作还是有点繁琐，因此附上自动安装shadowsocks和bbr的脚本。Vultr地址 说明只需要修改 password可以换成自己的密码 port可以换成其他端口 加密方式默认为：aes-256-cfb 脚本Vultr新建服务器Startup Script ( Manage )添加脚本：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#!/bin/shecho \"-------------------------------------\"echo \"-- Start Deployment environment(1) --\"echo \"-------------------------------------\"#设置变量password=taotao520port=8989#安装expectyum -y install expect#安装wgetyum -y install wget#更换内核 并开启BBRcd /wget --no-check-certificate \\https://github.com/teddysun/across/raw/master/bbr.shchmod +x bbr.sh#交互模式/usr/bin/expect &lt;&lt; EOFspawn ./bbr.shset timeout 300expect -re \"Press any key to start\" &#123;send \"\\r\"&#125;expect -re \"restart system?\" &#123;send \"n\\r\"; exp_continue&#125;interactEOFecho \"----------------end(1)---------------\"########################################################echo \"-------------------------------------\"echo \"-- Start Deployment environment(2) --\"echo \"-------------------------------------\"#查看bbr状态lsmod | grep bbr#安装Shadowsockscd /wget --no-check-certificate -O shadowsocks-go.sh \\https://raw.githubusercontent.com/teddysun/shadowsocks_install/\\master/shadowsocks-go.shchmod +x shadowsocks-go.sh#交互模式/usr/bin/expect &lt;&lt; EOFspawn ./shadowsocks-go.shset timeout 300expect -re \"Default password\" &#123;send \"$password\\r\"&#125;expect -re \"Default port:\" &#123;send \"$port\\r\"&#125;expect -re \"Which cipher\" &#123;send \"\\r\"&#125;expect -re \"Press any key\" &#123;send \"\\r\"; exp_continue&#125;interactEOF#启动echo \"--------------- restart -------------\"echo \"------------- show status -----------\"/etc/init.d/shadowsocks restart/etc/init.d/shadowsocks statusecho \"-------------- reboot bbr -----------\"reboot","categories":[{"name":"工具","slug":"工具","permalink":"http://immno.github.io/categories/工具/"}],"tags":[{"name":"vultr","slug":"vultr","permalink":"http://immno.github.io/tags/vultr/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://immno.github.io/tags/shadowsocks/"},{"name":"bbr","slug":"bbr","permalink":"http://immno.github.io/tags/bbr/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://immno.github.io/categories/工具/"}]},{"title":"Java调用R（二） 环境搭建","slug":"Java调用R（二）_环境搭建","date":"2017-06-17T08:22:45.000Z","updated":"2019-04-24T10:46:56.000Z","comments":true,"path":"2017/06/17/Java调用R（二）_环境搭建/","link":"","permalink":"http://immno.github.io/2017/06/17/Java调用R（二）_环境搭建/","excerpt":"","text":"摘要：描述分别在Ubuntu、Linux、Windows上搭建R的环境，以及一些配置项。 1.R环境搭建 R 官网（镜像等地址） 1) Windows：下载,安装运行即可 2) Linux：运行指令即可安装 $ yum install R启动$ R即可 3) Ubuntu：修改sources.list源文件用文本编辑软件如 vim 或 gedit 或 kate 打开/etc/apt/sources.list文件，在文本末尾新增一行： 如果是ubuntu是16.04 LTS（如图所示），新增 1deb https://cloud.r-project.org//bin/linux/ubuntu xenial/ 如果是ubuntu是15.10，新增 1deb https://cloud.r-project.org//bin/linux/ubuntu wily/ 如果ubuntu是14.04 LTS，新增 1deb https://cloud.r-project.org//bin/linux/ubuntu trusty/ 如果ubuntu是12.04 LTS，新增 1deb https://cloud.r-project.org//bin/linux/ubuntu precise/ 接着运行指令:12$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9$ sudo apt-get update 安装基本版，运行1$ sudo apt-get install r-base 也可以安装开发版（可以编译R包），运行1$ sudo apt-get install r-base-dev 可能需要XML依赖包：1$ sudo apt-get install libxml2-dev 启动$ R即可 2.包的导入 首先启动R（$ R） 安装R相关的包(注意引号)install.packages(&quot;Rserve&quot;) 导入包:library(Rserve) 查看包存储的目录.libPaths() 添加存储目录.libPaths(&quot;/path/to/directory/with/libraries&quot;) 3.其他配置1）查看配置1$ R CMD Rserve --RS-settings 或者1$ vim /etc/Rserv.conf 详解：123456789101112config file: 如果无此文件/etc/Rserv.conf, 系统会默认跳过这项working root: R运行时工作目录 /tmp/Rservport: 通信端口默认6311local socket: TCP/IP协议authorization: 认证是否开启plain text password: 是否允许明文密码passwords file: 密码文件allow I/O: 是否允许IO操作allow remote access: 远程访问是否开启control commands: 命令控制是否开启interactive: 是否允许通信max.input buffer size: 文件上传限制 创建配置文件12$ touch /etc/Rserv.conf$ vim /etc/Rserv.conf 1234567891011workdir /tmp/Rservremote enablefileio enableauth requiredplaintext enablefileio enableinteractive yesport 6311maxinbuf 262144encoding utf8control enable 2）后台启动Rserve1$ R CMD Rserve 3）后台启动Rserve（可远程连接）1$ R CMD Rserve --RS-enable-remote 4）查看R进程1$ ps -aux|grep Rserve 4.Rserve远程连接 参考 issues 1）创建密码文件创建rserve.pwd，完整路径为/etc/rserve.pwd1$ vim /etc/rserve.pwd add12test testtest1 test2 2）添加进配置文件1$ vim /etc/Rserv.conf add12345pwdfile /etc/rserve.pwdremote enableauth requiredplaintext disableencoding utf8 3）登录Rserve12345RConnection c = new RConnection(\"xxx.xxx.xxx.xxx\");if( c.needLogin()) &#123; c.login(\"test\", \"test\");&#125;//... 成功，谢谢！","categories":[{"name":"R","slug":"R","permalink":"http://immno.github.io/categories/R/"}],"tags":[{"name":"Java调用R","slug":"Java调用R","permalink":"http://immno.github.io/tags/Java调用R/"}],"keywords":[{"name":"R","slug":"R","permalink":"http://immno.github.io/categories/R/"}]},{"title":"Java调用R（一） 编写程序","slug":"Java调用R（一）_编写程序","date":"2017-06-16T11:20:23.000Z","updated":"2019-04-24T10:40:28.000Z","comments":true,"path":"2017/06/16/Java调用R（一）_编写程序/","link":"","permalink":"http://immno.github.io/2017/06/16/Java调用R（一）_编写程序/","excerpt":"","text":"摘要：实现Java调用R语言的两种方式，以及在调用过程中应该注意的和优化的事项。 1.引用Maven包maven如下12345678910&lt;dependency&gt; &lt;groupId&gt;org.rosuda.REngine&lt;/groupId&gt; &lt;artifactId&gt;Rserve&lt;/artifactId&gt; &lt;version&gt;1.8.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.rosuda.REngine&lt;/groupId&gt; &lt;artifactId&gt;REngine&lt;/artifactId&gt; &lt;version&gt;2.1.0&lt;/version&gt;&lt;/dependency&gt; 2.调用方式1) R源码如下123sourceTest &lt;- function(doubleA,doubleB)&#123; return (2*doubleA+doubleB)&#125; 2) Java调用方式一通过装载源码的方式，对于函数比较大，有很多子函数时不太方便123456789101112131415161718192021public static void sourceTest2(double a, double b) &#123; RConnection c = null; try &#123; //获得 R链接 c = new RConnection( \"127.0.0.1\"); //加载 源代码 c.voidEval(\"sourceTest &lt;- function(doubleA,doubleB)&#123;return (2*doubleA+doubleB)&#125;\"); //加载 参数 c.assign(\"para\", new double[]&#123;a, b&#125;); //执行函数 REXP data = c.eval(\"sourceTest(para[1],para[2])\"); //打印结果 System.out.println( data.asDouble()); &#125; catch (REXPMismatchException | REngineException ignored) &#123; // 做处理... &#125; finally &#123; if (c != null) &#123; c.close(); &#125; &#125; &#125; 有子函数时,就应该先加载子函数再加载主函数：123456//加载子函数 Ac.voidEval(\"sourceTestA &lt;- function(doubleA,doubleB)&#123;return (doubleA+doubleB)&#125;\");//加载子函数 Bc.voidEval(\"sourceTestB &lt;- function(doubleA,doubleB)&#123;return (doubleA*doubleB)&#125;\");//加载主函数，因为主函数中会用到子函数A和Bc.voidEval(\"sourceTest &lt;- function(doubleA,doubleB)&#123;return (sourceTestA(doubleA,doubleB)+sourceTestB(doubleA,doubleB)&#125;\"); 这种方式对子函数比较多，就很麻烦 3) Java调用方式二通过source的方式，对于子函数很多也很方便12345678910111213141516public static void sourceTest3(double a, double b) &#123; RConnection c = null; try &#123; c = new RConnection( \"127.0.0.1\"); c.assign(\"para\", new double[]&#123;a, b&#125;); c.eval(\"source(\\\"E:/Data/bigdata-r/out/sourceTest.R\\\")\"); REXP data = c.eval(\"sourceTest(para[1],para[2])\"); System.out.println( data.asDouble()); &#125; catch (REXPMismatchException | REngineException ignored) &#123; // 做处理... &#125; finally &#123; if (c != null) &#123; c.close(); &#125; &#125; &#125; 4) 简单测试1234public static void main(String[] args) &#123; sourceTest2(2, 3); sourceTest3(2, 3);&#125; 结果：1234E:\\Soft\\Java\\jdk1.8.0_101\\bin\\java....7.07.0Process finished with exit code 0 3.优化上面已经步骤完成了对Java对R的调用，但有时我们并不满足与此 捕获异常1234REXP data = c.parseAndEval(\"data&lt;-try( sourceTest(a[1],a[2]))\");if (data.inherits(\"try-error\")) &#123; System.out.println(\"Error: \" + data.asString());&#125; 通过parseAndEval和try()定义：程序可能会有异常产生；将通过data.inherits(&quot;try-error&quot;)这种方式捕获异常，当然这种方式肯定对性能有所影响 4.注意1) 加载boolean型参数12345if( config.isUseNA())&#123; c.voidEval(\"useNA &lt;- T\");&#125; else &#123; c.voidEval(\"useNA &lt;- F\");&#125; 只能以这种方式加载，其中useNA为参数名，T和F分别表示true、false 2) 获取返回的数据需要与编写R的同事沟通好返回什么类型，一般来说，有如下获取格式(可以相互独立)，REXP data = c.parseAndEval(&quot;....&quot;);：12345data.asList();RList result = ((REXP) data).asList();((REXP) result.get(\"AAA\")).asIntegers();((REXP) result.get(\"BBB\")).asDoubles();((REXP) result.get(\"CCC\")).asStrings())); 谢谢","categories":[{"name":"R","slug":"R","permalink":"http://immno.github.io/categories/R/"}],"tags":[{"name":"Java调用R","slug":"Java调用R","permalink":"http://immno.github.io/tags/Java调用R/"}],"keywords":[{"name":"R","slug":"R","permalink":"http://immno.github.io/categories/R/"}]}]}